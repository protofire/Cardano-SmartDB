const { expectedBodySchemaTime, expectedBodySchemaHealth, expectedBodySchemaInit,expectedBodySchemaCSRF,
    expectedBodySchemaChallengue, } = require('./baseTestCases');

const testCases = [
    {
        category: 'Time',
        description: 'should return 200 and the current server time',
        method: 'GET',
        url: '/api/time/get',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaTime,
    },
    // {
    //     category: 'Time',
    //     description: 'should return 500 when an error occurs while getting the server time',
    //     method: 'GET',
    //     url: '/api/time/get',
    //     entity: '',
    //     body: {},
    //     token: '',
    //     expectedStatus: 500,
    //     expectedBodySchema: yup.object({
    //         error: yup.string().required(),
    //     }),
    // },
    // {
    //     category: 'Time',
    //     description: 'should return 200 and sync emulator blockchain with server time',
    //     method: 'GET',
    //     url: '/api/time/sync-emulator-blockchain-time',
    //     entity: '',
    //     body: {},
    //     token: '',
    //     expectedStatus: 200,
    //     expectedBodySchema: yup.object({
    //         serverTime: yup.string().required(),
    //     }),
    // },
    // {
    //     category: 'Time',
    //     description: 'should return 405 when method is not allowed',
    //     method: 'GET',
    //     url: '/api/time/sync-emulator-blockchain-time',
    //     entity: '',
    //     body: {},
    //     token: '',
    //     expectedStatus: 405,
    //     expectedBodySchema: yup.object({
    //         error: yup.string().required(),
    //     }),
    // },
    // {
    //     category: 'Time',
    //     description: 'should return 500 when an error occurs while setting server time',
    //     method: 'GET',
    //     url: '/api/time/sync-emulator-blockchain-time',
    //     entity: '',
    //     body: {},
    //     token: '',
    //     expectedStatus: 500,
    //     expectedBodySchema: yup.object({
    //         error: yup.string().required(),
    //     }),
    // },
    {
        category: 'Health Check',
        description: 'should return 200 and status ok when the application is healthy',
        method: 'GET',
        url: '/api/health',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaHealth,
    },
    // {
    //     category: 'Error Handling',
    //     description: 'should return 500 when an error occurs while checking the health',
    //     method: 'GET',
    //     url: '/api/health',
    //     entity: '',
    //     body: {},
    //     token: '',
    //     expectedStatus: 500,
    //     expectedBodySchema: yup.object({
    //         error: yup.string().required(),
    //     }),
    // },

    {
        category: 'Initialization',
        description: 'should return 200 and initialization complete',
        method: 'POST',
        url: '/api/init',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaInit,
    },
    // {
    //     category: 'Error Handling',
    //     description: 'should return 500 when initialization fails',
    //     method: 'POST',
    //     url: '/api/init',
    //     entity: '',
    //     body: {},
    //     token: '',
    //     expectedStatus: 500,
    //     expectedBody: {},
    // },
    {
        category: 'CSRF Token',
        description: 'should return 200 and the CSRF token',
        method: 'GET',
        url: '/api/auth/csrf',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaCSRF,
    },
    // {
    //     category: 'Authentication',
    //     description: 'should return 200 when authentication is successful with valid credentials',
    //     method: 'POST',
    //     url: '/api/auth/callback/credentials',
    //     entity: '',
    //     body: {
    //         csrfToken: 'YOUR_CSRF_TOKEN',
    //         token: 'YOUR_JWT_TOKEN',
    //     },
    //     token: '',
    //     expectedStatus: 200,
    //     expectedBody: {},
    // },
    // {
    //     category: 'Authentication',
    //     description: 'should return 401 when authentication fails with invalid credentials',
    //     method: 'POST',
    //     url: '/api/auth/callback/credentials',
    //     entity: '',
    //     body: {
    //         csrfToken: 'YOUR_CSRF_TOKEN',
    //         token: 'INVALID_JWT_TOKEN',
    //     },
    //     token: '',
    //     expectedStatus: 401,
    //     expectedBody: {},
    // },
    // {
    //     category: 'Sign Out',
    //     description: 'should return 200 when sign out is successful',
    //     method: 'POST',
    //     url: '/api/auth/signout',
    //     entity: '',
    //     body: {
    //         csrfToken: 'YOUR_CSRF_TOKEN',
    //     },
    //     token: '',
    //     expectedStatus: 200,
    //     expectedBody: {},
    // },
    // {
    //     category: 'Sign Out',
    //     description: 'should return 401 when sign out fails with invalid CSRF token',
    //     method: 'POST',
    //     url: '/api/auth/signout',
    //     entity: '',
    //     body: {
    //         csrfToken: 'INVALID_CSRF_TOKEN',
    //     },
    //     token: '',
    //     expectedStatus: 401,
    //     expectedBody: {},
    // },
    {
        category: 'Smart DB Auth',
        description: 'get-challengue should return 200 and a challenge token',
        method: 'GET',
        url: '/api/smart-db-auth/get-challengue',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 200,
        expectedBodySchema: expectedBodySchemaChallengue,
    },
    {
        category: 'Smart DB Auth',
        description: 'get-challengue should return 405 when method is not allowed',
        method: 'POST',
        url: '/api/smart-db-auth/get-challengue',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 405,
    },
    // {
    //     category: 'Smart DB Auth',
    //     description: 'should return 500 when an internal server error occurs',
    //     method: 'GET',
    //     url: '/api/smart-db-auth/get-challengue',
    //     entity: '',
    //     body: {},
    //     token: '',
    //     expectedStatus: 500,
    // },
    // {
    //     category: 'Smart DB Auth',
    //     description: 'should return 200 and a JWT token',
    //     method: 'POST',
    //     url: '/api/smart-db-auth/get-token',
    //     entity: '',
    //     body: {
    //         address: 'your_wallet_address',
    //         walletNameOrSeedOrKey: 'your_wallet_name_or_seed_or_key',
    //         useBlockfrostToSubmit: 'true',
    //         isWalletFromSeed: 'true',
    //         isWalletFromKey: 'false',
    //         challengue: 'your_challengue',
    //         signedChallengue: 'your_signed_challengue',
    //     },
    //     token: '',
    //     expectedStatus: 200,
    //     expectedBodySchema: yup.object({
    //         token: yup.string().required(),
    //     }),
    // },
    // {
    //     category: 'Smart DB Auth',
    //     description: 'should return 400 when bad request',
    //     method: 'POST',
    //     url: '/api/smart-db-auth/get-token',
    //     entity: '',
    //     body: {},
    //     token: '',
    //     expectedStatus: 400,
    //     expectedBodySchema: yup.object({
    //         error: yup.string().required(),
    //     }),
    // },
    {
        category: 'Smart DB Auth',
        description: 'get-token should return 405 when method is not allowed',
        method: 'GET',
        url: '/api/smart-db-auth/get-token',
        entity: '',
        body: {},
        token: '',
        expectedStatus: 405,
    },
    // {
    //     category: 'Smart DB Auth',
    //     description: 'should return 500 when an internal server error occurs',
    //     method: 'POST',
    //     url: '/api/smart-db-auth/get-token',
    //     entity: '',
    //     body: {},
    //     token: '',
    //     expectedStatus: 500,
    //     expectedBodySchema: yup.object({
    //         error: yup.string().required(),
    //     }),
    // },
];

module.exports = {
    testCases,
};
